"""
This is a generated module
all modified changes will be lost in the next code generation
"""

import sys

assert sys.version >= '2' and sys.version_info.minor >= 7, "Python 2.7 or greater is supported"

import os
import unittest

from testc.regression.helper import RegressionHelper
from testc.regression.helper import RegressionBase
from testc.regression.helper import regressionLogger
from testc.regression.helper import injectMod

__test__ = True
__all__ = ["Test_EVLA3BitTutorialG192"]

module_helper	= "guides_helper_EVLA3BitTutorialG192"
module_post		= "guides_post_EVLA3BitTutorialG192"
module_patch	= "guides_patch_EVLA3BitTutorialG192"

class Test_EVLA3BitTutorialG192(RegressionBase):
	"""Testing class for EVLA_3-bit_Tutorial_G192 casa guide

	This is an autogenerated class for EVLA_3-bit_Tutorial_G192 guide testing purposes,
	all the modified code will be re-written in the next code generation.

	The class will test the following phrases:

	test_00 "splitting fields for analysis"
	test_01 "listobs on the initial data set"
	test_02 "flag table plot"
	test_03 "bandpass calibrator analysis flagging"
	test_04 "RFI phase calibrator flagging"
	test_05 "splitting good and bad data"
	test_06 "split and flagged listobs"
	test_07 "model for the flux calibrator"
	test_08 "determining antenna position corrections"
	test_09 "generating gaincurve calibration"
	test_10 "generate atmospheric opacity calibration"
	test_11 "generate requantizer gains corrections"
	test_12 "phase only calibration"
	test_13 "residual delays"
	test_14 "antenna bandpasses"
	test_15 "flux and bandpass calibrators gain"
	test_16 "bandpass calibrator gain amplitudes scaling"
	test_17 "spectral information"
	test_18 "phase only recalibration"
	test_19 "residual delays recalibration"
	test_20 "antenna bandpasses recalibration"
	test_21 "compute gain phases using 3C147"
	test_22 "compute gain phases using J0603+174"
	test_23 "compute gain phases using 3C84"
	test_24 "applying phase calibration"
	test_25 "3C147 scan solving amplitudes"
	test_26 "J0603+174  scan solving amplitudes"
	test_27 "3C84 scan solving amplitudes"
	test_28 "using fluxscale to transfer the amplitude solutions"
	test_29 "3C147 accumulated calibration"
	test_30 "gain accumulated calibration"
	test_31 "G192 accumulated calibration"
	test_32 "3C84 accumulated calibration"
	test_33 "flagging isolated RFI"
	test_34 "baseline flagging"
	test_35 "3C147 density model"
	test_36 "3C84 spectral information column"
	test_37 "initial phase calibration"
	test_38 "delay calibration"
	test_39 "bandpass calibration"
	test_40 "phase gain calibration field 0"
	test_41 "phase gain calibration field 1"
	test_42 "phase gain calibration field 3"
	test_43 "phase gain calibration infinite solution interval"
	test_44 "amplitude calibration solutions field 0"
	test_45 "amplitude calibration solutions field 1"
	test_46 "amplitude calibration solutions field 3"
	test_47 "flux calibration solutions"
	test_48 "apply calibration tables field 0"
	test_49 "apply calibration tables field 1"
	test_50 "apply calibration tables field 2"
	test_51 "apply calibration tables field 3"
	test_52 "splitting calibrated data 3C147"
	test_53 "splitting calibrated data J0603+174"
	test_54 "splitting calibrated data G192"
	test_55 "splitting calibrated data 3C84"
	test_56 "single spectral window cleaning"
	test_57 "lower frequency baseband cleaning"
	test_58 "upper frequency baseband cleaning"
	test_59 "basebands mfs taylor cleaning"
	test_60 "spectral index image filtering"
	test_61 "spectral index probable errors filtering"
	test_62 "intensity weighted mean spectral analysis"

	In order to skip a test, append the pyunit decorator: @unittest.skip("reason?")
	"""

	@classmethod
	def setUpClass(cls):
		pass

	def setUp(self):
		pass

	def tearDown(self):
		pass

	@classmethod
	def tearDownClass(cls):
		pass

	@injectMod(module_helper) 
	@injectMod(module_post)
	def test_00_splitting_fields_for_analysis(self):
		"""test 00 EVLA_3-bit_Tutorial_G192 "splitting fields for analysis"
		"""
		pass

	@injectMod(module_helper) 
	@injectMod(module_post)
	def test_01_listobs_on_the_initial_data_set(self):
		"""test 01 EVLA_3-bit_Tutorial_G192 "listobs on the initial data set"
		"""
		pass

	@injectMod(module_helper) 
	@injectMod(module_post)
	def test_02_flag_table_plot(self):
		"""test 02 EVLA_3-bit_Tutorial_G192 "flag table plot"
		"""
		pass