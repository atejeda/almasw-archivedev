## define template variables
#set($guide_phrases = $template_helper["phrases"])
#set($guide = $template_helper["guide"])
#set($guide_class = "Test_" + $guide)
#set($uri = $template_helper["uri"])
##
"""
This is a generated module
all modified changes will be lost in the next code generation
"""

import sys

assert sys.version >= '2' and sys.version_info.minor >= 7, "Python 2.7 or greater is supported"

import os
import unittest

from testc.regression.helper import RegressionHelper
from testc.regression.helper import RegressionBase
from testc.regression.helper import regressionLogger
from testc.regression.helper import injectMod

__test__ = True
__all__ = ["$guide_class"]

module_helper	= "guides_helper_${guide}"
module_post		= "guides_post_${guide}"
module_patch	= "guides_patch_${guide}"

class ${guide_class}(RegressionBase):
	"""Testing class for $uri casa guide
	
	This is an autogenerated class for $uri guide testing purposes,
	all the modified code will be re-written in the next code generation.

	The class will test the following phrases:

	#foreach ($phrase in $guide_phrases)
	test_$phrase[2] "$phrase[0]"#end


	In order to skip a test, append the pyunit decorator: @unittest.skip("reason?")
	"""

	@classmethod
	def setUpClass(cls):
		pass

	def setUp(self):
		pass

	def tearDown(self):
		pass

	@classmethod
	def tearDownClass(cls):
		pass

#foreach ($phrase in $guide_phrases)
#if("test_${phrase[2]}_${phrase[3]}" == "test_17_spectral_information")
	@injectMod(module_patch) # patched
#elseif("test_${phrase[2]}_${phrase[3]}" == "test_36_3c84_spectral_information_column")
	@injectMod(module_patch) # patched
#elseif("test_${phrase[2]}_${phrase[3]}" == "test_56_single_spectral_window_cleaning")
	@injectMod(module_patch) # patched
#elseif("test_${phrase[2]}_${phrase[3]}" == "test_57_lower_frequency_baseband_cleaning")
	@injectMod(module_patch) # patched
#elseif("test_${phrase[2]}_${phrase[3]}" == "test_58_upper_frequency_baseband_cleaning")
	@injectMod(module_patch) # patched
#elseif("test_${phrase[2]}_${phrase[3]}" == "test_59_basebands_mfs_taylor_cleaning")
	@injectMod(module_patch) # patched
#else
	@injectMod(module_helper) 
#end
	@injectMod(module_post)
	def test_${phrase[2]}_${phrase[3]}(self):
		"""test ${phrase[2]} $uri "$phrase[0]"
		"""
		pass	
	#end
